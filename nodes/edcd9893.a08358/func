const KNOWN_EVENTS = [
//     push_type                  event_type         comment
// hook
    [ 'webhook_activation'      , undefined        , 'webhook activated'   ],
    [ 'topology_changed'        , undefined        , 'topology changed'    ],
    [ 'NACamera-movement'       , 'movement'       , 'motion detected'     ],
    [ 'NACamera-person'         , 'person'         , 'person detected'     ],
    [ 'NACamera-on'             , 'on'             , 'camera on'           ],
    [ 'NACamera-off'            , 'off'            , 'camera off'          ],
    [ 'NACamera-connection'     , 'connection'     , 'camera connected'    ],
    [ 'NACamera-connection'     , 'disconnection'  , 'camera disconnected' ],
// poll  
    [ 'polling_start'           , undefined        , 'polling started'     ],
    [ 'NRPulled-movement'       , undefined        , 'motion detected'     ],
    [ 'NRPulled-person'         , undefined        , 'person detected'     ],
    [ 'NRPulled-boot'           , undefined        , 'camera started'      ],
    [ 'NRPulled-on'             , undefined        , 'camera on'           ],
    [ 'NRPulled-off'            , undefined        , 'camera off'          ],
    [ 'NRPulled-connection'     , undefined        , 'camera connected'    ],
    [ 'NRPulled-disconnection'  , undefined        , 'camera disconnected' ],
// socket
    [ 'websocket_connection'    , undefined        , 'websocket connected' ],
    [ 'connection'              , 'connection'     , 'camera connected'    ],
    [ 'disconnection'           , 'disconnection'  , 'camera disconnected' ],
    [ 'NACamera-silent'         , 'silent'         , 'occupancy change'    ],
    [ 'NACamera-cloud'          , 'cloud'          , 'cloud event'         ],
    [ 'NACamera-model_improved' , 'model_improved' , 'model improved'      ],
    [ 'NACamera-end_recording'  , 'end_recording'  , 'end recording'       ]
];

var getLog = function(m, c) {
    // If m includes c return m, else if m is not empty return m (c), else return: c.
    return m.toLowerCase().includes(c)? m: m.length > 0? m + ' (' + c + ')': c;
}

var payload = msg.payload;
var source = payload.source;
var pushType = payload.push_type;
var eventType = payload.event_type;
var message = (payload.message || '').replace(/<[^>]*>/g, '');

var unknown = msg;
var known = null;
for(var i=0, n=KNOWN_EVENTS.length; i<n; i++) {
    var ref = KNOWN_EVENTS[i];
    if (pushType === ref[0] && eventType === ref[1]) {
        unknown = null;
        known = msg;
        
        var comment = ref[2];
        node.log('[Welcome-' + source + '] ' + getLog(message, comment));
        break;
    }
}

return [ unknown, known ];