const PULLED = 'NRPulled-';
const KNOWN_EVENTS = [
//pulled
    [ 'NRPulled-movement'      , undefined       , 'motion detected'     ],
    [ 'NRPulled-person'        , undefined       , 'person detected'     ],
    [ 'NRPulled-animal'        , undefined       , 'animal detected'     ],
    [ 'NRPulled-boot'          , undefined       , 'camera started'      ],
    [ 'NRPulled-connection'    , undefined       , 'camera connected'    ],
    [ 'NRPulled-disconnection' , undefined       , 'camera disconnected' ],
    [ 'NRPulled-on'            , undefined       , 'camera on'           ],
    [ 'NRPulled-off'           , undefined       , 'camera off'          ],
//pushed
    [ 'topology_changed'       , undefined       , 'topology event'      ],
    [ 'webhook_activation'     , undefined       , 'webhook event'       ],
    [ 'NACamera-on'            , 'on'            , 'on event'            ],
    [ 'NACamera-off'           , 'off'           , 'off event'           ],
    [ 'NACamera-movement'      , 'movement'      , 'motion event'        ],
    [ 'NACamera-person'        , 'person'        , 'person detected'     ],
    [ 'NACamera-connection'    , 'connection'    , 'camera connected'    ],
    [ 'NACamera-connection'    , 'disconnection' , 'camera disconnected' ]
];

var payload = msg.payload;
var pushType = payload.push_type;
var eventType = payload.event_type;
var message = payload.message || '';

if (message.length > 0) {
    message = message.replace(/<[^>]*>/g, '');
    message = ' ("' + message + '")';
}

var known = null;
var unknown = msg;
for(var i=0; i<KNOWN_EVENTS.length; i++) {
    if (KNOWN_EVENTS[i][0] === pushType &&
            KNOWN_EVENTS[i][1] === eventType) {
                
        known = msg;
        unknown = null;
        
        node.log('[Welcome] ' + KNOWN_EVENTS[i][2] + message);
        break;
    }
}

return [ known, unknown ];