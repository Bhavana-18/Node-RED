const PULLED = 'NRPulled-';
const KNOWN_EVENTS = [
//poll
    [ 'NRPulled-movement'      , undefined       , 'motion detected'     ],
    [ 'NRPulled-person'        , undefined       , 'person detected'     ],
    [ 'NRPulled-boot'          , undefined       , 'camera started'      ],
    [ 'NRPulled-on'            , undefined       , 'camera on'           ],
    [ 'NRPulled-off'           , undefined       , 'camera off'          ],
    [ 'NRPulled-connection'    , undefined       , 'camera connected'    ],
    [ 'NRPulled-disconnection' , undefined       , 'camera disconnected' ],
//socket
    [ 'websocket_activation'   , undefined       , 'websocket connected' ],
    [ 'NACamera-end_recording' , 'end_recording' , 'end recording'       ],
//hook
    [ 'webhook_activation'     , undefined       , 'webhook activated'   ],
    [ 'topology_changed'       , undefined       , 'topology changed'    ],
    [ 'NACamera-movement'      , 'movement'      , 'motion detected'     ],
    [ 'NACamera-person'        , 'person'        , 'person detected'     ],
    [ 'NACamera-on'            , 'on'            , 'camera on'           ],
    [ 'NACamera-off'           , 'off'           , 'camera off'          ],
    [ 'NACamera-connection'    , 'connection'    , 'camera connected'    ],
    [ 'NACamera-connection'    , 'disconnection' , 'camera disconnected' ]
];

var payload = msg.payload;
var source = payload.source || 'webhook';
var pushType = payload.push_type;
var eventType = payload.event_type;

// clean message from html tags
var message = payload.message || '';
if (message.length > 0) {
    message = message.replace(/<[^>]*>/g, '');
}

// check event type
var known = null;
var unknown = msg;
for(var i=0; i<KNOWN_EVENTS.length; i++) {
    if (KNOWN_EVENTS[i][0] === pushType &&
            KNOWN_EVENTS[i][1] === eventType) {
                
        known = msg;
        unknown = null;
        
        var log = KNOWN_EVENTS[i][2];
        if (message.toLowerCase().includes(log)) {
            // don't repeat message if same as log
            log = '';
        } else if (message.length > 0) {
            log = ' (' + log + ')';
        }
        node.log('[Welcome-' + source + '] ' + message + log);
        break;
    }
}

// clean duplicates
if (pushType === 'NRPulled-person') {
}

// prepare person ids
if (pushType === 'NACamera-movement' && eventType) {
    var personId = payload.person_id;
    if (personId !== undefined) {
        payload.persons = [ { id: personId } ];
    }
}

return [ known, unknown ];